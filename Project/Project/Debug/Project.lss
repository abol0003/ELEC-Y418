
AVRASM ver. 2.2.8  C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm Tue Apr 15 14:01:35 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(11): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\ScreenShow.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(12): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\Snake.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(13): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\Board.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(14): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\Obstacles.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(15): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\food.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(16): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\TableDisplay.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328pdef.inc'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(11): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\ScreenShow.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(12): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\Snake.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(13): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\Board.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(14): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\Obstacles.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(15): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\food.asm'
C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\main.asm(16): Including file 'C:\Users\alexb\OneDrive - Université Libre de Bruxelles\MA1-ULBDrive\ELEC-Y418\LAB\Labs\Project\Project\TableDisplay.asm'
                                 
                                 .INCLUDE "m328pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .CSEG
                                 .ORG 0x0000
000000 c2c4                          RJMP start
                                 .ORG 0x001A
00001a c2e2                      	RJMP Timer1OverflowInterrupt
                                 .ORG 0x0020
000020 c2d7                          RJMP Timer0OverflowInterrupt
                                 
                                 .INCLUDE "ScreenShow.asm"
                                 
                                 
                                 InitScreen:
000021 930f                      	PUSH R16
000022 e308                          LDI R16, (1<<3)|(1<<4)|(1<<5)
000023 b904                          OUT DDRB, R16
000024 982b                          CBI PORTB, 3
000025 982c                          CBI PORTB, 4
000026 982d                          CBI PORTB, 5
000027 910f                      	POP R16
000028 9508                      	RET
                                 
                                 ClearScreen:
000029 93ef                          PUSH ZL
00002a 93ff                          PUSH ZH
00002b 930f                          PUSH R16
00002c 931f                          PUSH R17
00002d e0e0                          LDI ZL, low(0x0100)
00002e e0f1                          LDI ZH, high(0x0100)
00002f e000                          LDI R16, 0       ; Valeur zéro pour effacer
000030 e416                          LDI R17, 70      ; Nombre doctets à effacer
                                 clear_loop:
000031 9301                          ST Z+, R16      ; Écrire 0 dans le buffer et incrémenter le pointeur
000032 951a                          DEC R17
000033 f7e9                          BRNE clear_loop
                                 
000034 910f                      	POP R16
000035 911f                          POP R17
000036 91ff                          POP ZH
000037 91ef                          POP ZL
000038 9508                          RET
                                 DisplayLine:
000039 920f                      	PUSH	R0
00003a 921f                      	PUSH	R1
00003b 930f                      	PUSH	R16
00003c 931f                      	PUSH	R17
00003d 934f                      	PUSH	R20
00003e 93ef                      	PUSH	ZL
00003f 93ff                      	PUSH	ZH
000040 b70f                      	IN		R16,	SREG
000041 930f                      	PUSH	R16
                                 
000042 e0f1                      	LDI		ZH,		high(0x0100)
000043 e0e0                      	LDI		ZL,		low(0x0100)
                                 
000044 e005                      	LDI		R16,	5
000045 9f08                      	MUL		R16,	R24
000046 0de0                      	ADD		ZL,		R0
                                 nbByte_line:
000047 e00a                      	LDI R16, 10 ;number of byte to send at same time
                                 DisplayLineLoop:
000048 9141                      	LD		R20,	Z+
000049 940e 006a                 	CALL	pushByte
                                 
00004b 3006                      	CPI		R16,	6
00004c f411                      	BRNE	HighScreen
                                 
00004d 967e                      	ADIW	Z,		6*5
                                 
00004e 9a1c                      	SBI		PINB,	4
                                 
                                 HighScreen:
00004f 950a                      	DEC		R16
000050 f7b9                      	BRNE	DisplayLineLoop
000051 e840                      	LDI		R20,	0x80
                                 	; the goal is to transform the column number into binaire
000052 fd82                      	SBRC	R24,	2 ; if bit 2 is 0 then Swap is skipped
000053 9542                      	SWAP	R20
                                 
000054 fd80                      	SBRC	R24,	0
000055 9546                      	LSR		R20
                                 
000056 ff81                      	SBRS	R24,	1
000057 c002                      	RJMP	EnableLine
                                 	
000058 9546                      	LSR		R20
000059 9546                      	LSR		R20
                                 
                                 EnableLine:
00005a 940e 006a                 	CALL	pushByte
00005c 9a1c                      	SBI		PINB,	4
00005d 958a                      	DEC		R24
00005e f40c                      	BRGE	endScreen
00005f e086                      	LDI		R24,	6
                                 
                                 endScreen:
000060 910f                      	POP		R16
000061 bf0f                      	OUT		SREG,	R16
000062 91ff                      	POP 	ZH
000063 91ef                      	POP 	ZL
000064 914f                      	POP 	R20
000065 911f                      	POP		R17
000066 910f                      	POP 	R16
000067 901f                      	POP		R1
000068 900f                      	POP		R0
000069 9518                      	RETI
                                 
                                 pushByte:
00006a e018                      	LDI		R17,	8
                                 pushByteLoop:
00006b 982b                      	CBI		PORTB,	3
00006c fb40                      	BST		R20,	0 ; prend le bit numero b de R20 et le met dans le bit T
00006d f40e                      	BRTC	send			;Branch if T Flag Cleared
00006e 9a2b                      	SBI		PORTB,	3
                                 send:
00006f 9a1d                      	SBI		PINB,	5
000070 9a1d                      	SBI		PINB,	5
000071 9546                      	LSR		R20 ; decal vers la droite le bit 0 est mis dans le carry
000072 951a                      	DEC		R17
000073 f7b9                      	BRNE	pushByteLoop
                                 .INCLUDE "Snake.asm"
000074 9508                      
                                 
                                 .DEF snake_row = R20     ; Coordonnée de la ligne du serpent
                                 .DEF snake_col = R21     ; Coordonnée de la colonne du serpent
                                 .equ UP    = 1
                                 .equ DOWN  = 2
                                 .equ LEFT  = 3
                                 .equ RIGHT = 4
                                 .DEF SnakeDirection = R22
                                 
                                 SnakeInit:
000075 e043                          LDI snake_row, 3  ; Ligne 1
000076 e151                          LDI snake_col, 17 ; Colonne 39
000077 e062                      	LDI SnakeDirection, 2
000078 d035                          RCALL SetPosBuffer   ; Allume le pixel correspondant dans le buffer
000079 9508                          RET
                                 
                                 SnakeMain:
00007a 930f                          PUSH R16
00007b 931f                          PUSH R17
00007c 2f04                          MOV R16, snake_row     ; R16 = ligne actuelle
00007d 2f15                          MOV R17, snake_col     ; R17 = colonne actuelle
00007e 3064                      	CPI SnakeDirection, RIGHT
00007f f429                          BRNE check_left
000080 951a                          DEC R17
000081 f00a                      	BRMI backleft                ; Déplacement vers la droite
000082 c019                          RJMP update_head
                                 backleft:
000083 e217                      	LDI R17, 39
000084 c017                          RJMP update_head
                                 check_left:
000085 3063                          CPI SnakeDirection, LEFT
000086 f431                          BRNE check_up
000087 9513                          INC R17                ; Déplacement vers la gauche
000088 3218                      	CPI R17, 40
000089 f009                      	BREQ backright
00008a c011                          RJMP update_head
                                 backright:
00008b e010                      	LDI R17, 0
00008c c00f                          RJMP update_head
                                 check_up:
00008d 3061                          CPI SnakeDirection, UP
00008e f429                          BRNE check_down
00008f 950a                          DEC R16  
000090 f00a                      	BRMI gohighscreen              ; Déplacement vers le haut
000091 c00a                          RJMP update_head
                                 gohighscreen:
000092 e00d                      	LDI R16, 13
000093 c008                          RJMP update_head
                                 check_down:
000094 3062                          CPI SnakeDirection, DOWN
000095 f431                          BRNE update_head       ; Si aucune des directions n'est détectée, on ne change pas la position
000096 9503                          INC R16 
000097 300e                      	CPI R16, 14
000098 f009                      	BREQ godownscreen
000099 c002                      	RJMP update_head
                                 godownscreen:
00009a e000                      	LDI R16, 0
00009b c000                      	RJMP update_head
                                 update_head:
00009c 940e 00a4                 	CALL ClearOldPos
00009e 2f40                          MOV snake_row, R16
00009f 2f51                          MOV snake_col, R17
0000a0 d00d                          RCALL SetPosBuffer
0000a1 911f                          POP R17
0000a2 910f                          POP R16
0000a3 9508                          RET
                                 
                                 ClearOldPos:
0000a4 9843                      	CBI PORTC,3
0000a5 93cf                      	PUSH YL
0000a6 93df                      	PUSH YH
0000a7 d014                          RCALL GetByteAndMask ; R0 contient loctet actuel du buffer, R1 le masque du pixel
0000a8 9410                      	COM R1  ; allow to keep the obstacles on when snake goes in same byte of an pixel of obstacle
0000a9 2001                      	AND R0,R1
0000aa 8208                      	ST Y, R0
0000ab 91cf                      	POP YL
0000ac 91df                      	POP YH
0000ad 9508                      	RET
                                 
                                 
                                 
                                 ;------------------------------------------------------------
                                 ; Find column ( trame of bits ) and position in buffer (line)
                                 ;------------------------------------------------------------
                                 SetPosBuffer:
0000ae 93cf                          PUSH YL
0000af 93df                          PUSH YH
0000b0 920f                      	PUSH R0
0000b1 921f                      	PUSH R1
                                 	;RCALL CheckFoodCollision
0000b2 d009                          RCALL GetByteAndMask 
0000b3 d0ac                      	RCALL CheckObstacles  ; R0 contient loctet actuel, R1 le masque du pixel
0000b4 d007                      	RCALL GetByteAndMask
0000b5 2801                          OR R0, R1            ; do or to keep previous led on on ( for example obstacle etc)
0000b6 8208                          ST Y, R0 
0000b7 900f                      	POP R0
0000b8 901f                      	POP R1            ; Écrit loctet mis à jour dans le buffer
0000b9 91df                          POP YH
0000ba 91cf                          POP YL
0000bb 9508                          RET
                                 ;------------------------------------------------------------
                                 ; 
                                 ;	Is used to find the position of the snake
                                 ;
                                 ;------------------------------------------------------------
                                 GetByteAndMask:
0000bc 930f                          PUSH R16
0000bd 922f                          PUSH R2
0000be 923f                          PUSH R3
                                     ; Sauvegarder les coordonnées dans R2 (ligne) et R3 (colonne)
0000bf 2e24                          MOV R2, R20
0000c0 2e35                          MOV R3, R21
                                     ; Initialiser le pointeur Y vers le début du buffer (0x0100)
0000c1 e0c0                          LDI YL, low(0x0100)
0000c2 e0d1                          LDI YH, high(0x0100)
                                     ; Pour chaque ligne, avancer de 5 octets (chaque ligne = 40 colonnes = 5 octets)
                                 GetByteAndMaskRow:
0000c3 2022                          TST R2
0000c4 f019                          BREQ GetByteAndMaskP2 ; branch if R2=0
0000c5 9625                          ADIW Y, 5 ; enable to select the good row
0000c6 942a                          DEC R2
0000c7 cffb                          RJMP GetByteAndMaskRow
                                 GetByteAndMaskP2:
0000c8 e008                          LDI R16, 8    ; Chaque octet représente 8 colonnes
                                 GetByteAndMaskCol:
0000c9 1630                          CP R3, R16 ; is doing colnum/8
0000ca f018                          BRLO GetByteAndMaskP3	;branch if lower
0000cb 1a30                          SUB R3, R16
0000cc 9621                          ADIW Y, 1 ; max 5 times as only 5 octet in a row
0000cd cffb                          RJMP GetByteAndMaskCol
                                 GetByteAndMaskP3:; ici on est dans la bonne adress de la ram
0000ce e001                          LDI R16, 0b00000001  ; Masque initial pour la colonne 0
                                 GetByteAndMaskColMask:
0000cf 2033                          TST R3 ; ici le reste <8 determinera dans quelle colonne on est 
0000d0 f019                          BREQ GetByteAndMaskEnd
0000d1 0f00                          LSL R16             ; Décalage vers la gauche car le a colonne 0 est tout à droite
0000d2 943a                          DEC R3
0000d3 cffb                          RJMP GetByteAndMaskColMask
                                 GetByteAndMaskEnd:
0000d4 8008                          LD R0, Y            ;  lit le contenu de la mémoire pointée par Y
0000d5 2e10                          MOV R1, R16         ; Copier le masque dans R1 de la colonne
0000d6 903f                          POP R3
0000d7 902f                          POP R2
0000d8 910f                          POP R16
0000d9 9508                          RET
                                 
                                 
                                 .INCLUDE "Board.asm"
                                 
                                 
                                 .equ KEYB_PIN   = PIND
                                 .equ KEYB_DDR   = DDRD
                                 .equ KEYB_PORT  = PORTD
                                 .equ ROW1       = 7
                                 .equ ROW2       = 6
                                 .equ ROW3       = 5
                                 .equ ROW4       = 4
                                 .equ COL1       = 3
                                 .equ COL2       = 2
                                 .equ COL3       = 1
                                 .equ COL4       = 0
                                 
                                 
                                 InitKeyboard:
0000da 930f                      		PUSH R16
0000db 931f                      		PUSH R17
0000dc e00f                      		LDI r16,(1<<COL1)|(1<<COL2)|(1<<COL3)|(1<<COL4)
0000dd ef10                      		LDI r17,(1<<ROW1)|(1<<ROW2)|(1<<ROW3)|(1<<ROW4)
0000de 0000                      		NOP
0000df b90b                      		OUT KEYB_PORT,r16  ; Drive columns with HIGH values 
0000e0 0000                      		NOP
0000e1 b91a                      		OUT KEYB_DDR,r17   ; Set rows as outputs
0000e2 910f                      		POP R16 
0000e3 911f                      		POP R17
0000e4 9508                      		RET	
                                 
                                 .MACRO Rowdetection
                                 ;STEP2 method
                                  ;the output configuration for rows generates the signal, while the input configuration for columns detects the signal when a button is pressed.
                                     ; Set the rows as input because use of KEYB_PORT
                                 	LDI r17,(1<<ROW1)|(1<<ROW2)|(1<<ROW3)|(1<<ROW4)
                                 	LDI r16,(1<<COL1)|(1<<COL2)|(1<<COL3)|(1<<COL4)
                                 	NOP
                                 	OUT KEYB_PORT,r17
                                 	NOP
                                 	OUT KEYB_DDR,r16     ; Configure keyboard port data direction for columns
                                 	NOP                 
                                 	
                                     ; Check which row is LOW indicating that a key is pressed on that row
                                 	; SBIS Make Skip next instruction if bit ROW1 in the PIN register is set (HIGH)
                                 	SBIS KEYB_PIN,ROW1   
                                 	RJMP @0            
                                 	SBIS KEYB_PIN,ROW2   
                                 	RJMP @1            
                                 	SBIS KEYB_PIN,ROW3   
                                 	RJMP @2           
                                 	SBIS KEYB_PIN,ROW4   
                                 	RJMP @3 
                                 	RET           
                                 .ENDMACRO
                                 
                                 ; Fonction pour lire les entrées du clavier
                                 ReadKeyboard:
0000e5 0000                      	NOP
0000e6 9b4a                          SBIS PIND, COL2           ; UP and DOWN
0000e7 c017                      	RJMP Col2P
0000e8 9b4b                          SBIS PIND, COL1           ; LEFT
0000e9 c005                      	RJMP Col1P
0000ea 9b49                          SBIS PIND, COL3           ; RIGHT
0000eb c023                      	RJMP Col3P
0000ec 9b48                      	SBIS PIND, COL4
0000ed c031                      	RJMP Col4P
0000ee 9508                      	RET 
                                 
                                 Col1P:
0000ef ef10
0000f0 e00f
0000f1 0000
0000f2 b91b
0000f3 0000
0000f4 b90a
0000f5 0000
0000f6 9b4f
0000f7 c047
0000f8 9b4e
0000f9 c03b
0000fa 9b4d
0000fb c043
0000fc 9b4c
0000fd c041
0000fe 9508                      	Rowdetection DOnothing, SetDirectionLeft, DOnothing, DOnothing
                                 Col2P:   
0000ff ef10
000100 e00f
000101 0000
000102 b91b
000103 0000
000104 b90a
000105 0000
000106 9b4f
000107 c027
000108 9b4e
000109 c035
00010a 9b4d
00010b c026
00010c 9b4c
00010d c031
00010e 9508                      	Rowdetection SetDirectionUp, DOnothing, SetDirectionDown, DOnothing
                                 Col3P:
00010f ef10
000110 e00f
000111 0000
000112 b91b
000113 0000
000114 b90a
000115 0000
000116 9b4f
000117 c027
000118 9b4e
000119 c01e
00011a 9b4d
00011b c023
00011c 9b4c
00011d c021
00011e 9508                      	Rowdetection DOnothing, SetDirectionRight, DOnothing, DOnothing
                                 Col4P:
00011f ef10
000120 e00f
000121 0000
000122 b91b
000123 0000
000124 b90a
000125 0000
000126 9b4f
000127 c013
000128 9b4e
000129 c015
00012a 9b4d
00012b c013
00012c 9b4c
00012d c010
00012e 9508                      	Rowdetection Pause,DOnothing, DOnothing, restart
                                 
                                 
                                 SetDirectionUp:
00012f e061                          LDI SnakeDirection, UP  
000130 dfa9                      	RCALL InitKeyBoard  ;As we use 2 step method we need to reswitch row as output
000131 9508                          RET
                                 
                                 SetDirectionDown:
000132 e062                          LDI SnakeDirection, DOWN 
000133 dfa6                      	RCALL InitKeyBoard  
000134 9508                          RET
                                 
                                 SetDirectionLeft:
000135 e063                          LDI SnakeDirection, LEFT 
000136 dfa3                      	RCALL InitKeyBoard  
000137 9508                          RET
                                 
                                 SetDirectionRight:
000138 e064                          LDI SnakeDirection, RIGHT
000139 dfa0                      	RCALL InitKeyBoard  
00013a 9508                          RET
                                 Pause:
00013b e065                      	LDI SnakeDirection, 5
00013c df9d                      	RCALL InitKeyBoard
00013d 9508                      	RET
                                 restart:
00013e c1ad                      	RJMP init
                                 
                                 DOnothing:
00013f df9a                      	RCALL InitKeyBoard  
000140 9508                      	RET
                                 .INCLUDE "Obstacles.asm"
                                 
                                 
                                 InitObstacles:
000141 93ef                          PUSH ZL
000142 93ff                          PUSH ZH
000143 930f                          PUSH R16
000144 931f                          PUSH R17
000145 e0e0                          LDI ZL, low(0x0100)
000146 e0f1                          LDI ZH, high(0x0100)
000147 e015                          LDI R17, 5
000148 ef0f                          LDI R16, OBSTACLE
                                 
                                 WriteObstaclesLine0:
000149 9301                          ST Z+, R16
00014a 951a                          DEC R17
00014b f7e9                          BRNE WriteObstaclesLine0
                                 
00014c e0e0                          LDI ZL, low(0x0100)
00014d e0f1                          LDI ZH, high(0x0100)
00014e 96f2                          ADIW Z, 5*10
00014f e012                          LDI R17, 2
                                 
                                 WriteObstaclesLine10:
000150 9301                          ST Z+, R16
000151 951a                          DEC R17
000152 f7e9                          BRNE WriteObstaclesLine10
000153 e021                          LDI R18,0x01
000154 e01c                          LDI R17,12
                                 
                                 WriteOblique:
000155 9321                          ST Z+,R18
000156 9634                          ADIW Z, 4
000157 0f22                          LSL R18
000158 3820                          CPI R18, 0x80
000159 951a                          DEC R17
00015a f7d1                          BRNE WriteOblique    
00015b 911f                          POP R17
00015c 910f                          POP R16
00015d 91ff                          POP ZH
00015e 91ef                          POP ZL
00015f 9508                          RET
                                 
                                 CheckObstacles:
000160 930f                          PUSH R16
000161 931f                          PUSH R17
000162 2d00                          MOV R16, R0
000163 2d11                          MOV R17, R1
000164 2301                          AND R16, R17
000165 2300                          TST R16
000166 f419                          BRNE Collision
000167 910f                          POP R16
000168 911f                          POP R17
000169 9508                          RET
                                 
                                 Collision:
00016a 910f                          POP R16
00016b 911f                          POP R17
00016c d092                          RCALL CheckFoodCollision
00016d 3021                          CPI R18, 1
00016e f419                          BRNE IsWall
00016f 3020                          CPI R18,0
000170 f4b9                          BRNE EatFood
000171 9508                          RET
                                 
                                 IsWall:
000172 c09c                          RJMP GameOver
                                 	;RJMP restart
                                 .INCLUDE "food.asm"
                                 
                                 
                                 ; Définition de la nourriture
                                 .DEF food_row = R19     ; Coordonnée de la ligne de la nourriture
                                 .DEF food_col = R25     ; Coordonnée de la colonne de la nourriture
                                 .DEF random =R18
                                 .DEF score= R23
                                 ; Routine d'initialisation de la nourriture
                                 FoodInit:
000173 936f                      	PUSH R22
000174 e070                      	LDI score, 0
000175 e03c                      	LDI food_row, 0x0C 
000176 e297                      	LDI food_col, 0x27       ; Valeur maximale de la colonne (39)
000177 e723                      	LDI random, 0x73
000178 940e 018c                     CALL GenerateFoodPos
00017a 916f                      	POP R22
00017b 9508                          RET
                                 
                                 CheckPlace:
00017c 930f                      	PUSH R16
00017d 931f                      	PUSH R17
00017e 2d04                      	MOV R16, R4 ; 
00017f 2d15                      	MOV R17, R5 ;
000180 2301                      	AND R16, R17
000181 2300                      	TST R16
000182 f449                      	BRNE GenerateFoodPos
000183 2845                      	OR R4, R5            ; Effectue un OR pour ajouter la nourriture au buffer
000184 924c                          ST X, R4           ; Écrit la valeur mise à jour dans le buffer
000185 910f                      	POP R16
000186 911f                      	POP R17
000187 9508                      	RET
                                 EatFood:
000188 9573                      	INC score
000189 940e 018c                     CALL GenerateFoodPos    
00018b 9508                          RET
                                 GenerateFoodPos:
00018c 930f                          PUSH R16
00018d 931f                          PUSH R17
00018e 940e 01bf                     CALL Mixing
                                 
                                     ; Génération de la ligne de la nourriture
000190 2f13                          MOV R17, food_row      ; Prépare R17 pour RandomGenROW
                                 GenFoodRow:
000191 9526                      	LSR random
000192 940e 01a4                     CALL RandomGenROW      ; R17 contient une ligne aléatoire (valeur entre 0 et 12)
000194 1714                          CP R17, snake_row      ; Compare à la ligne du serpent (snake_row)
000195 f3d9                          BREQ GenFoodRow        ; Si égal, on régénère une nouvelle ligne
000196 2f31                          MOV food_row, R17      ; Sinon, on sauvegarde la ligne dans food_row
                                 
                                     ; Génération de la colonne de la nourriture
000197 2f19                          MOV R17, food_col      ; Prépare R17 pour RandomGenCOL
000198 940e 01b1                     CALL RandomGenCOL 
00019a 0f22                      	LSL random     ; R17 contient une colonne aléatoire (valeur entre 0 et 39)
00019b 3010                          CPI R17, 0             ; Vérification pour éviter la colonne zéro
00019c f409                          BRNE StoreFoodCol
00019d e011                          LDI R17, 1             ; Si 0, on force la colonne à 1
                                 StoreFoodCol:
00019e 2f91                          MOV food_col, R17      ; On sauvegarde la colonne dans food_col
                                 
00019f 940e 01dd                     CALL SetFoodBuffer     ; Met à jour le buffer d'affichage
0001a1 910f                          POP R16
0001a2 911f                          POP R17
0001a3 9508                          RET
                                 
                                 
                                 ; Routine pour générer un nombre aléatoire dans un registre donné
                                 RandomGenROW:
0001a4 9526                      	LSR random
0001a5 2712                          EOR R17, random
0001a6 301d                      	CPI R17, 13
0001a7 f408                      	BRSH LetGoInROW
0001a8 9508                          RET
                                 LetGoInROW:
0001a9 9526                      	LSR random
0001aa 9516                      	LSR R17
0001ab 940e 01ce                 	CALL Mixing2
0001ad 2712                      	EOR R17,random
0001ae 301d                      	CPI R17, 13
0001af f7c8                      	BRSH LetGoInROW
0001b0 9508                      	RET
                                 RandomGenCOL:
0001b1 2f02                      	MOV R16, random
0001b2 0f22                      	LSL random
0001b3 9500                      	COM R16
0001b4 2720                      	EOR random, R16
0001b5 2712                          EOR R17, random
0001b6 3218                      	CPI R17, 40
0001b7 f408                      	BRSH LetGoInCOL
0001b8 9508                          RET
                                 
                                 LetGoInCOL:
0001b9 9526                      	LSR random
0001ba 9516                      	LSR R17
0001bb 2712                      	EOR R17,random
0001bc 3218                      	CPI R17, 40
0001bd f7d8                      	BRSH LetGoInCOL
0001be 9508                          RET
                                 Mixing:
0001bf 931f                      	PUSH R17
0001c0 930f                      	PUSH R16
0001c1 2f02                          MOV R16, random                 ; Clone random to R16
0001c2 2f12                          MOV R17, random                 ; Clone random to R19
0001c3 9526                          LSR random                      ; Décale random à droite
0001c4 fb00                          BST R16, 0                       ; Prend le premier bit (LSB) de R16
0001c5 f926                          BLD random, 6                    ; Place ce bit en 6ème position de random
0001c6 f916                          BLD R17, 6                       ; Même pour R19
0001c7 2710                          EOR R17, R16                     ; R19 = R16 XOR R19
0001c8 fb16                          BST R17, 6                       ; Prend le 7ème bit de R19
0001c9 f925                          BLD random, 5 
0001ca 2725                      	EOR random, snake_col                   ; Place ce bit en 5ème position de random
0001cb 910f                      	POP R16
0001cc 911f                      	POP R17
0001cd 9508                          RET
                                 Mixing2:
0001ce 931f                      	PUSH R17
0001cf 930f                      	PUSH R16
0001d0 2f02                          MOV R16, random                 ; Clone random to R16
0001d1 2f12                          MOV R17, random                 ; Clone random to R19
0001d2 9526                          LSR random                      ; Décale random à droite
0001d3 fb00                          BST R16, 0                       ; Prend le premier bit (LSB) de R16
0001d4 f924                          BLD random, 4                    ; Place ce bit en 6ème position de random
0001d5 f916                          BLD R17, 6                       ; Même pour R19
0001d6 2710                          EOR R17, R16                     ; R19 = R16 XOR R19
0001d7 fb14                          BST R17, 4                       ; Prend le 7ème bit de R19
0001d8 f925                          BLD random, 5 
0001d9 2724                      	EOR random, snake_row                   ; Place ce bit en 5ème position de random
0001da 910f                      	POP R16
0001db 911f                      	POP R17
0001dc 9508                          RET
                                 ; Routine pour mettre à jour la position de la nourriture dans le buffer d'affichage
                                 SetFoodBuffer:
                                 
0001dd 922f                      	PUSH R2
0001de 923f                      	PUSH R3
0001df 93af                      	PUSH XL
0001e0 93bf                      	PUSH XH
0001e1 2e23                          MOV R2, food_row
0001e2 2e39                          MOV R3, food_col
                                     ; Initialiser le pointeur Y vers le début du buffer (0x0100)
0001e3 e0a0                          LDI XL, low(0x0100)
0001e4 e0b1                          LDI XH, high(0x0100)
                                     ; Pour chaque ligne, avancer de 5 octets (chaque ligne = 40 colonnes = 5 octets)
                                 SetFoodBufferRow:
0001e5 2022                          TST R2
0001e6 f019                          BREQ SetFoodBufferP2 ; Branch if R2 == 0
0001e7 9615                          ADIW X, 5            ; Avance de 5 octets pour atteindre la ligne correcte
0001e8 942a                          DEC R2
0001e9 cffb                          RJMP SetFoodBufferRow
                                 SetFoodBufferP2:
0001ea e008                          LDI R16, 8           ; Chaque octet représente 8 colonnes
                                 SetFoodBufferCol:
0001eb 1630                          CP R3, R16           ; Vérifie où se trouve la colonne
0001ec f018                          BRLO SetFoodBufferP3  ; Si c'est inférieur, on reste dans l'octet actuel
0001ed 1a30                          SUB R3, R16
0001ee 9611                          ADIW X, 1            ; Avance d'un octet dans la ligne
0001ef cffb                          RJMP SetFoodBufferCol
                                 SetFoodBufferP3:
0001f0 e001                          LDI R16, 0b00000001  ; Masque initial pour la colonne 0
                                 SetFoodBufferColMask:
0001f1 2033                          TST R3
0001f2 f019                          BREQ SetFoodBufferEnd
0001f3 0f00                          LSL R16              ; Décale à gauche pour avancer dans les colonnes
0001f4 943a                          DEC R3
0001f5 cffb                          RJMP SetFoodBufferColMask
                                 SetFoodBufferEnd:
0001f6 904c                          LD R4, X             ; Lit le contenu de la mémoire pointée par Y
0001f7 2e50                          MOV R5, R16          ; Place le masque dans R1
0001f8 940e 017c                 	CALL CheckPlace
0001fa 91bf                      	POP XH
0001fb 91af                          POP XL
0001fc 903f                          POP R3
0001fd 902f                          POP R2
0001fe 9508                          RET
                                 
                                 ; Routine de gestion de la collision entre le serpent et la nourriture
                                 CheckFoodCollision:
0001ff 930f                          PUSH R16
000200 931f                      	PUSH R17
000201 2f03                          MOV R16, food_row    ; Récupère la position de la nourriture
000202 2f19                          MOV R17, food_col    ; Récupère la position de la nourriture
                                     ; Vérifie si la position du serpent est la même que celle de la nourriture
000203 1740                          CP snake_row, R16
000204 f431                          BRNE NoCollision
000205 1751                          CP snake_col, R17
000206 f421                          BRNE NoCollision
                                     ; Si on est sur la même position, c'est une collision (manger la nourriture)
000207 e021                          LDI R18, 1 
000208 910f                      	POP R16
000209 911f                      	POP R17
00020a 9508                      	RET        
                                 NoCollision:
00020b e020                      	LDI R18,0
00020c 910f                          POP R16
00020d 911f                      	POP R17
00020e 9508                          RET
                                 
                                 
                                 .INCLUDE "TableDisplay.asm"
                                 
                                 
                                 GameOver :
00020f 940e 0029                 	CALL CLearScreen 
000211 e0c0                      	LDI YL, low(0x0200)                
000212 e0d2                      	LDI YH, high(0x0200)                
000213 e00d                      	LDI R16, 13                ; G
000214 9309                      	ST Y+, R16
000215 e00b                      	LDI R16, 11                ; A
000216 9309                      	ST Y+, R16
000217 e00f                      	LDI R16, 15                 ; M
000218 9309                      	ST Y+, R16
000219 e00c                      	LDI R16, 12
00021a 9309                      	ST Y+, R16                 ; E
00021b e00a                      	LDI R16, 10                 ; espace 
00021c 9309                      	ST Y+, R16
00021d e100                      	LDI R16, 16                 ; O
00021e 9309                      	ST Y+, R16
00021f e105                      	LDI R16, 21                 ; V
000220 9309                      	ST Y+, R16
000221 e00c                      	LDI R16, 12                 ; E
000222 9309                      	ST Y+, R16
000223 e102                      	LDI R16, 18                 ; R
000224 9309                      	ST Y+, R16
000225 2f07                      	MOV R16, score              ; score
000226 9309                      	ST Y+, R16
000227 c019                      	RJMP WaitRestart
                                 LetsGO:
000228 940e 0029                 	CALL CLearScreen 
00022a e0c0                      	LDI YL, low(0x0200)                
00022b e0d2                      	LDI YH, high(0x0200)                
00022c e00e                      	LDI R16, 14                ; L
00022d 9309                      	ST Y+, R16
00022e e00c                      	LDI R16, 12                ; E
00022f 9309                      	ST Y+, R16
000230 e104                      	LDI R16, 20                 ; T
000231 9309                      	ST Y+, R16
000232 e106                      	LDI R16, 22
000233 9309                      	ST Y+, R16                 ; '
000234 e103                      	LDI R16, 19                 ; S 
000235 9309                      	ST Y+, R16
000236 e00d                      	LDI R16, 13                 ; G
000237 9309                      	ST Y+, R16
000238 e100                      	LDI R16, 16                 ; 0
000239 9309                      	ST Y+, R16
00023a e107                      	LDI R16, 23                 
00023b 9309                      	ST Y+, R16
00023c e102                      	LDI R16, 18                  
00023d 9309                      	ST Y+, R16
00023e e100                      	LDI R16,  16             
00023f 9309                      	ST Y+, R16
000240 c000                      	RJMP WaitRestart
                                 WaitRestart:
000241 940e 00e5                 	CALL ReadKeyboard
000243 e060                      	LDI R22,0
000244 e0ca                      	LDI YL, low(0x020A)                
000245 e0d2                      	LDI YH, high(0x0200) 
                                 intermediate :
000246 e0a0                      	LDI XL, low(0x0100)	
000247 e0b1                      	LDI XH, high(0x0100)	
000248 0fa6                      	ADD XL, R22
000249 3065                      	CPI R22,5
00024a f4c0                      	BRSH gohigh
                                 EnableHigh:
00024b e000                      	LDI R16,0								; Count from 6 to 0 to have all the flash line
00024c e027                      	LDI R18,7						; Send the row
00024d e018                      	LDI R17,8
00024e 913a                      	LD R19,-Y ; load value in buffer
                                 blocksloopGame:
00024f ecea                      	LDI ZL,low(CharTable << 1)
000250 e0f4                      	LDI ZH,high(CharTable << 1)
000251 2f53                      	MOV R21, R19
000252 9f51                      	MUL R21,R17 ; multiply to get the right line of the table					
000253 2d50                      	MOV R21,R0								
000254 0f50                      	ADD R21,R16	; add offset to go trought all row each byte in table is for one row						
000255 1fe5                      	ADC ZL, R21 ; add it to Z 
000256 f410                      	BRCC NoCarry
000257 e051                      	LDI R21, 1
000258 0ff5                      	ADD ZH,R21
                                 	NoCarry:
000259 9154                      		LPM R21,Z	; load the good byte in table
                                 blockGame :
00025a 935c                      	ST X, R21			; mauvaise gestion icic
00025b 9615                      	ADIW X, 5 ; go to next row ( a line is 5 byte)
00025c 9503                      	INC R16				
00025d 952a                      	DEC R18		; 7 to zero to make all raw 
00025e f781                      	BRNE blocksloopGame
00025f 9563                      	INC R22
000260 306a                      	CPI R22, 10
000261 f2f9                      	BREQ WaitRestart
000262 cfe3                      	RJMP intermediate					
                                 gohigh:
000263 965e                      	ADIW X, 30 ; high screen commence à 0x0123
000264 cfe6                      	RJMP EnableHigh
                                 	
                                 CharTable:
000265 111f
000266 1111
000267 1111
000268 001f                      .db 0b00011111,0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00011111,0b00000000 ; 0
000269 0c04
00026a 0414
00026b 0404
00026c 001f                      .db 0b00000100,0b00001100,0b00010100,0b00000100,0b00000100,0b00000100,0b00011111,0b00000000 ; 1
00026d 111f
00026e 0201
00026f 0804
000270 001f                      .db 0b00011111,0b00010001,0b00000001,0b00000010,0b00000100,0b00001000,0b00011111,0b00000000 ; 2
000271 011f
000272 1f01
000273 0101
000274 001f                      .db 0b00011111,0b00000001,0b00000001,0b00011111,0b00000001,0b00000001,0b00011111,0b00000000 ; 3
000275 1111
000276 1f11
000277 0101
000278 0001                      .db 0b00010001,0b00010001,0b00010001,0b00011111,0b00000001,0b00000001,0b00000001,0b00000000 ; 4
000279 101f
00027a 1f10
00027b 0101
00027c 001f                      .db 0b00011111,0b00010000,0b00010000,0b00011111,0b00000001,0b00000001,0b00011111,0b00000000 ; 5
00027d 101f
00027e 1f10
00027f 1111
000280 001f                      .db 0b00011111,0b00010000,0b00010000,0b00011111,0b00010001,0b00010001,0b00011111,0b00000000 ; 6
000281 111f
000282 0201
000283 0804
000284 0010                      .db 0b00011111,0b00010001,0b00000001,0b00000010,0b00000100,0b00001000,0b00010000,0b00000000 ; 7 
000285 111f
000286 1f11
000287 1111
000288 001f                      .db 0b00011111,0b00010001,0b00010001,0b00011111,0b00010001,0b00010001,0b00011111,0b00000000 ; 8
000289 111f
00028a 1f11
00028b 0101
00028c 001f                      .db 0b00011111,0b00010001,0b00010001,0b00011111,0b00000001,0b00000001,0b00011111,0b00000000 ; 9
00028d 0000
00028e 0000
00028f 0000
000290 0000                      .db 0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000 ; nothing 10
000291 0a04
000292 1111
000293 111f
000294 0011                      .db 0b00000100,0b00001010,0b00010001,0b00010001,0b00011111,0b00010001,0b00010001,0b00000000 ;A => 11
000295 101f
000296 1f10
000297 1010
000298 001f                      .db 0b00011111,0b00010000,0b00010000,0b00011111,0b00010000,0b00010000,0b00011111,0b00000000 ;E => 12
000299 101f
00029a 1710
00029b 1111
00029c 001f                      .db 0b00011111,0b00010000,0b00010000,0b00010111,0b00010001,0b00010001,0b00011111,0b00000000 ;G => 13
00029d 2020
00029e 2020
00029f 2020
0002a0 003f                      .db 0b00100000,0b00100000,0b00100000,0b00100000,0b00100000,0b00100000,0b00111111,0b00000000	;L=>14
0002a1 1b11
0002a2 1115
0002a3 1111
0002a4 0011                      .db 0b00010001,0b00011011,0b00010101,0b00010001,0b00010001,0b00010001,0b00010001,0b00000000 ;M => 15
0002a5 111f
0002a6 1111
0002a7 1111
0002a8 001f                      .db 0b00011111,0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00011111,0b00000000 ;O => 16
0002a9 111f
0002aa 1f11
0002ab 1010
0002ac 0010                      .db 0b00011111,0b00010001,0b00010001,0b00011111,0b00010000,0b00010000,0b00010000,0b00000000 ;P => 17
0002ad 111f
0002ae 1f11
0002af 1214
0002b0 0011                      .db 0b00011111,0b00010001,0b00010001,0b00011111,0b00010100,0b00010010,0b00010001,0b00000000 ;R => 18
0002b1 80f8
0002b2 f880
0002b3 0808
0002b4 00f8                      .db 0b11111000,0b10000000,0b10000000,0b11111000,0b00001000,0b00001000,0b11111000,0b00000000 ;S => 19
0002b5 041f
0002b6 0404
0002b7 0404
0002b8 0004                      .db 0b00011111,0b00000100,0b00000100,0b00000100,0b00000100,0b00000100,0b00000100,0b00000000 ;T => 20
0002b9 1111
0002ba 1111
0002bb 0a11
0002bc 0004                      .db 0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00001010,0b00000100,0b00000000 ;V => 21
0002bd 2020
0002be 4020
0002bf 0000
0002c0 0000                      .db 0b00100000,0b00100000,0b00100000,0b01000000,0b00000000,0b00000000,0b00000000,0b00000000 ; '=> 22
0002c1 111e
0002c2 1e11
0002c3 1111
0002c4 001e                      
                                 
                                 start:
                                     ; Initialisation de la pile
0002c5 e008                          LDI R16, HIGH(RAMEND)
0002c6 bf0e                          OUT SPH, R16
0002c7 ef0f                          LDI R16, LOW(RAMEND)
0002c8 bf0d                          OUT SPL, R16
0002c9 9a3b                      	SBI DDRC,3
0002ca 9843                          CBI PORTC,3
0002cb 9a3a                      	SBI DDRC,2
0002cc 9842                          CBI PORTC,2
                                 
0002cd dd53                      	RCALL InitScreen
0002ce de0b                      	RCALL InitKeyboard
                                 
                                     ; Effacer le buffer d'affichage
0002cf dd59                          RCALL ClearScreen
                                     ;-------------------------------------
                                     ; Configuration du Timer0 en mode normal
0002d0 e000                      	LDI r16, 0         ; Load 0 into r16
0002d1 9300 0080                 	STS TCCR1A, r16     ; Store 0 in TCCR1A to set Timer1 to Normal mode
                                     ; Choix d'un prescaler de 64 : CS01 et CS00 à 1
0002d3 e003                          LDI R16, (1<<CS01)|(1<<CS00)
0002d4 bd05                          OUT TCCR0B, R16
                                     ; Charger TCNT0 avec la valeur de départ (ici 0x06)
                                     ; La valeur détermine la période d'interruption (Période = (256  TCNT0)*(prescaler/clok))
0002d5 e006                          LDI R16, 0x06
0002d6 bd06                          OUT TCNT0, R16
                                     ; Activer l'interruption de débordement du Timer0 (bit TOIE0 dans TIMSK0)
0002d7 e001                          LDI R16, (1<<TOIE0)
0002d8 9300 006e                     STS TIMSK0, R16
                                 
                                 		 ;-------------------------------------
                                     ; Configuration du Timer1 pour le mouvement du snake
                                 ; Timer 1: Reload value for overflow at 440Hz
                                 ; clock of 16MHz then number of cycles equal 16MHz x(1/880)= 18182 cycles 
                                 ; we are on 16 bit timer then we want to precharge 2^16-18182= 47354 cycles to reach the overflow after 18182 cycles
                                 ; the interrupt toggle 
                                     ; On utilise ici un prescaler de 64 
0002da e000                      	LDI r16, 0          ; Load 0 into r16
0002db 9300 0080                 	STS TCCR1A, r16     ; Store 0 in TCCR1A to set Timer1 to Normal mode
0002dd e004                          LDI R16, 4       ; Prescaler 64
0002de 9300 0081                     STS TCCR1B, R16
                                     ; Charger Timer1 pour obtenir environ 8 Hz (valeurs obtenues par calcul)
0002e0 e00f                      	LDI R16, 0x0F             ; Valeur haute initiale
0002e1 9300 0085                     STS TCNT1H, R16
0002e3 ef0f                          LDI R16, 0xFF            ; Valeur basse initiale
0002e4 9300 0084                     STS TCNT1L, R16
                                     ; Activer l'interruption de débordement du Timer1 (TOIE1)
0002e6 e001                          LDI R16, (1<<TOIE1)
0002e7 9300 006f                     STS TIMSK1, R16
                                 
                                     ; Activer les interruptions globales
0002e9 9478                          SEI
0002ea 940e 0228                 	CALL LetsGo
                                 ;------------------------------------------------------------
                                 ; INIT
                                 ;------------------------------------------------------------
                                 init:
0002ec 940e 0029                 	CALL ClearScreen
0002ee 940e 0141                 	CALL InitObstacles
0002f0 940e 0075                     CALL SnakeInit
0002f2 940e 0173                 	CALL FoodInit
0002f4 9478                      	SEI
                                 
                                 main_loop:
0002f5 d00f                      	RCALL Delay
0002f6 dd83                          RCALL SnakeMain          ; Cette routine est définie dans Snake.asm
0002f7 cffd                          RJMP main_loop
                                 
                                 Timer0OverflowInterrupt:
0002f8 9842                      	CBI PORTC,2
0002f9 e076                          LDI R23, 0x06
0002fa bd76                          OUT TCNT0, R23
                                     ; Appeler la fonction d'affichage de la ligne
0002fb dd3d                          RCALL DisplayLine
0002fc 9518                          RETI
                                 
                                 ;------------------------------------------------------------
                                 ; Timer1Interrupt : Mise à jour du mouvement du snake
                                 ;------------------------------------------------------------
                                 Timer1OverflowInterrupt:
                                     ; Recharger Timer1 pour obtenir la période de mouvement désirée
0002fd e906                          LDI R16, 0x96             ; Recharge de la partie haute
0002fe 9300 0085                     STS TCNT1H, R16
000300 ef0f                          LDI R16, 0xFF           ; Recharge de la partie basse
000301 9300 0084                     STS TCNT1L, R16
000303 dde1                      	RCALL ReadKeyboard
                                     ; Appeler la routine qui met à jour le mouvement du snake
000304 9518                          RETI
                                 
                                 DELAY:
                                 	;PUSH R16
                                 	;PUSH R17
                                 	;PUSH R18
                                 
000305 e906                          LDI R16,150
                                 L1:
000306 ef1f                          LDI R17,255
                                 L2:
000307 e322                      	LDI R18,50
                                 L3:
000308 952a                          DEC R18
000309 f7f1                          BRNE L3
00030a 951a                          DEC R17
00030b f7d9                      	BRNE L2
00030c 950a                      	DEC R16
00030d f7c1                      	BRNE L1
                                 	;POP R16
                                 	;POP R17
                                 	;POP R18


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   7 y  :  26 z  :   9 r0 :  12 r1 :   9 r2 :  10 r3 :  14 r4 :   4 
r5 :   3 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 161 r17:  86 r18:  37 r19:   7 r20:  17 
r21:  15 r22:  17 r23:   5 r24:   6 r25:   5 r26:   5 r27:   4 r28:   8 
r29:   8 r30:  13 r31:  12 
Registers used: 25 out of 35 (71.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   4 adiw  :   9 and   :   3 
andi  :   0 asr   :   0 bclr  :   0 bld   :   6 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :   8 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   2 
brne  :  22 brpl  :   0 brsh  :   5 brtc  :   1 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   5 call  :  19 cbi   :   8 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   5 cpc   :   0 
cpi   :  17 cpse  :   0 dec   :  17 eor   :   9 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   5 jmp   :   0 
ld    :   4 ldd   :   0 ldi   : 109 lds   :   0 lpm   :   2 lsl   :   5 
lsr   :  12 mov   :  28 movw  :   0 mul   :   2 muls  :   0 mulsu :   0 
neg   :   0 nop   :  15 or    :   2 ori   :   0 out   :  17 pop   :  51 
push  :  47 rcall :  20 ret   :  37 reti  :   3 rjmp  :  45 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   7 sbic  :   0 sbis  :  20 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  28 std   :   0 sts   :   9 
sub   :   2 subi  :   0 swap  :   1 tst   :   6 wdr   :   0 
Instructions used: 49 out of 113 (43.4%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00061e   1314    192   1506   32768   4.6%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
